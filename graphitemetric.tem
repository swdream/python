# using graphitesend

# Installing
pip install graphitesend

# some distributes:
init: Create the module instance of GraphiteSend.
send: Make sure that we have an instance of the GraphiteClient.
      Then send the metrics to the graphite server.
send_dict: send a dict data 
reset: Disconnect from the graphite server and destroy the module instance.
TCP vs UDP: There is a new branch for UDP support called 'udp and tcp'.
            TCP will continue to be the default with UDP as an option

# Connect to a different graphite server
graphitesend.init(graphite_server='graphite.example.com')
# Connect to a different graphite server port
graphitesend.init(graphite_port=2003)

# sending of a metric called metric with a value of 45
graphitesend.send('metric', 45)
# The above would send the following metric to graphite
# system.localhostname.metric 45 epoch-time-stamp

# using a group of cpu to alter the metric prefix
g = graphitesend.init(group='cpu')

# Using a different prefix (other then system.hostname)
g = graphitesend.init(prefix='apache.rc')
# The above would send the following metric to graphite
# apache.rc.404 4 epoch-time-stamp

# Sending a dict()
g.send_dict({'metric': 45, 'metric2': 55})

# set a metric prefix using kwargs
g = graphitesend.init(prefix='prefix')
g.send('metric', 2)
# sent 34 long message: prefix.metric 2.000000 1365068929
